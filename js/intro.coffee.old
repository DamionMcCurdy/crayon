(() ->

  # Convert radial coordinates to cartesian.
  # (x,y) represent the cartesioan origin of the radial coordinates.
  # Radials start as in the clock.
  rad2cart = (r,a,x=0,y=0) ->
    dx = r * Math.sin(a)
    dy = r * Math.cos(a)
    [x + dx, y + dy]

  # Create a polygon of n sides around point (x,y).
  # Variable r quantifies the size.
  mkPolygon = (x,y,n,r) ->
    aa = _.shuffle [1..360]
    angles = (2 * Math.PI / 360 * aa.pop() for num in [1..n])
    angles.sort((a, b) -> a - b)
    coordinates = (rad2cart(r,angle,x,y) for angle in angles)

  margin = {top: 20, right: 20, bottom: 20, left: 20}
  width = 800 - margin.left - margin.right
  height = 800 - margin.top - margin.bottom

  line = d3.svg.line()

  svg = d3.select("#intro").append("svg")
      .attr("id","introSVG")
      .attr("viewBox", "0 0 800 800")          # make it
      .attr("preserveAspectRatio", "xMidYMid") # responsive
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(400,400)")

  svg.append("circle")
      .attr({
        "r": 2,
        "cx": 0,
        "cy": 0
      })
      .style({
        fill: "#313131"
      })

  
  one = (n,r) ->
    p = svg.append("path")
        .datum(([0,0] for i in [1..n]))
        .attr("d", (d) -> line(d) + "Z" )
        .style({
          "stroke": "#333"
          "stroke-width": "0px"
          "fill": "#333"
          })
    alpha = Math.random() * 2 * Math.PI
    xx = (Math.sqrt(Math.pow(t,2) + Math.pow(t,4)) * Math.cos(alpha) for t in [1..20])
    yy = (Math.sqrt(Math.pow(t,2) + Math.pow(1*t*t,2)) * Math.sin(alpha) for t in [1..20])
    z = r
    count = 0
    IntId = setInterval(() ->
      count += 1
      console.log count
      if count < 20
        z = z * 0.9
        poly = mkPolygon(xx[count],yy[count],n,z)
        p.datum(poly).transition().duration(10000).ease("linear")
            .attr("d", (d) -> line(d) + "Z" )
      else
        clearInterval(IntId)
        p.datum(mkPolygon(xx[count-1],yy[count-1],n,0))
            .transition().duration(4000).ease("linear")
            .attr("d", (d) -> line(d) + "Z" )
            .each("end", ->
              p.remove()
            )
    ,2000)

  MyId = window.setInterval(one(4,40), 1000)


  return


)()